package apple

import (
	"errors"

	"github.com/golang-jwt/jwt/v4"
	"github.com/spf13/cast"
)

// GetUniqueID decodes the id_token and returns the unique subject ID to identify the user
func GetUniqueID(token *jwt.Token) (string, error) {
	if token == nil {
		return "", errors.New("missing token")
	}
	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return "", errors.New("invalid claims")
	}
	return cast.ToString(claims["sub"]), nil
}

// GetClaims decodes the id_token and returns the JWT claims to identify the user
func GetClaims(token *jwt.Token) (jwt.MapClaims, error) {
	if token == nil {
		return nil, errors.New("missing token")
	}
	claims, ok := token.Claims.(jwt.MapClaims)
	if !ok {
		return nil, errors.New("invalid claims")
	}
	return claims, nil
}

// GetEmail decodes the id_token and returns the email address granted from user
//
// Depending on the user's privacy settings and authentication, the email address
// may be either their real email or a privacy relay email generated by Apple.
func GetEmail(token *jwt.Token) (email string, emailVerified, isPrivateEmail bool, ok bool) {
	claims, _ := GetClaims(token)
	if claims == nil {
		return "", false, false, false
	}

	email = cast.ToString(claims["email"])
	emailVerified = cast.ToBool(claims["email_verified"])
	isPrivateEmail = cast.ToBool(claims["is_private_email"])

	ok = email != ""
	return email, emailVerified, isPrivateEmail, ok
}
